<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo Install</title>
    <url>/2020/05/21/Hexo-Install/</url>
    <content><![CDATA[<h2 id="安裝前要確定有安裝"><a href="#安裝前要確定有安裝" class="headerlink" title="安裝前要確定有安裝"></a>安裝前要確定有安裝</h2><ul>
<li>Node.js</li>
<li>Git</li>
</ul>
<a id="more"></a>

<h2 id="安裝-hexo-git"><a href="#安裝-hexo-git" class="headerlink" title="安裝 hexo git"></a>安裝 hexo git</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h2 id="安裝-hexo"><a href="#安裝-hexo" class="headerlink" title="安裝 hexo"></a>安裝 hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="下載完後創建資料夾"><a href="#下載完後創建資料夾" class="headerlink" title="下載完後創建資料夾"></a>下載完後創建資料夾</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;DIRNAME&gt;</span><br></pre></td></tr></table></figure>

<h3 id="創建必要的檔案"><a href="#創建必要的檔案" class="headerlink" title="創建必要的檔案"></a>創建必要的檔案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;DIRNAME&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h2 id="修改-lt-DIRNAME-gt-config-yml-檔案"><a href="#修改-lt-DIRNAME-gt-config-yml-檔案" class="headerlink" title="修改 &lt;DIRNAME&gt;/_config.yml 檔案"></a>修改 <code>&lt;DIRNAME&gt;/_config.yml</code> 檔案</h2><p>為了可以連結到 Github 上所以要修改以下內容:<br>最下方有個</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>:</span><br></pre></td></tr></table></figure>
<p>修改為:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &lt;USERNAME&gt; 為你的帳號名稱</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">'git'</span></span><br><span class="line">  repo: https://github.com/&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git</span><br></pre></td></tr></table></figure>

<h2 id="檔案操作"><a href="#檔案操作" class="headerlink" title="檔案操作"></a>檔案操作</h2><p>接下來就可以寫幾個簡單的內容上傳了</p>
<h3 id="文章位置"><a href="#文章位置" class="headerlink" title="文章位置"></a>文章位置</h3><p>主要的文章內容會放在 <code>&lt;DIRNAME&gt;/source/_posts</code> 裡面<br>附檔名都是 <code>.md</code></p>
<h3 id="創建文章"><a href="#創建文章" class="headerlink" title="創建文章"></a>創建文章</h3><h4 id="Method1"><a href="#Method1" class="headerlink" title="Method1"></a>Method1</h4><p>文章可以自己創建 <code>.md</code> 檔案再增加內容<br>基本內容如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: <span class="built_in">test</span></span><br><span class="line">---</span><br><span class="line">這邊寫內容</span><br></pre></td></tr></table></figure>
<p>—下方就是寫內容的區域</p>
<h4 id="Method2"><a href="#Method2" class="headerlink" title="Method2"></a>Method2</h4><p>也可以透過 <code>hexo</code> 創建<br>*<em>記得要先進到 <DIRNAME> *</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NEWPOSTNAME 就是要創建的檔案名稱</span></span><br><span class="line">hexo new &lt;NEWPOSTNAME&gt;</span><br></pre></td></tr></table></figure>

<p>它會自動幫你創建 date (這個不重要，因為佈署上去都會自動完成)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: <span class="built_in">test</span></span><br><span class="line">date: 2020-05-21 17:54:35</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="刪除文章"><a href="#刪除文章" class="headerlink" title="刪除文章"></a>刪除文章</h3><p>直接從 <code>&lt;DIRNAME&gt;/source/_posts</code> 裡面直接刪除<br>再重新佈署就可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h3 id="清除緩存"><a href="#清除緩存" class="headerlink" title="清除緩存"></a>清除緩存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clear</span><br><span class="line">or</span><br><span class="line">$ hexo cl</span><br></pre></td></tr></table></figure>

<h3 id="生成靜態檔案"><a href="#生成靜態檔案" class="headerlink" title="生成靜態檔案"></a>生成靜態檔案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">or</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<h3 id="佈署"><a href="#佈署" class="headerlink" title="佈署"></a>佈署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">or</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Install</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Opencv issue</title>
    <url>/2020/05/17/Install_Opencv_issue/</url>
    <content><![CDATA[<p>安裝完opencv-contrib-python後 <code>import cv2</code> 時出現:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last): File <span class="string">"&lt;stdin&gt;"</span>, </span><br><span class="line">line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt; File <span class="string">"/usr/local/lib/python3.7/</span></span><br><span class="line"><span class="string">site-packages/cv2/__init__.py"</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line"><span class="keyword">from</span> .cv2 <span class="keyword">import</span> * ImportError: libhdf5_serial.so<span class="number">.103</span>: </span><br><span class="line">cannot open shared object file: No such file <span class="keyword">or</span> directory</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>— — — — — — 解決- — — — — — —</p>
<h1 id="Step1"><a href="#Step1" class="headerlink" title="Step1:"></a>Step1:</h1><p>到 <code>cv2</code> 路徑下<br><code>cd /usr/local/lib/python3.7/site-packages/cv2</code><br>找到 <code>cv2.cpython-37m-arm-linux-gnueabihf.so</code></p>
<h1 id="Step2"><a href="#Step2" class="headerlink" title="Step2:"></a>Step2:</h1><p>尋找未安裝的套件<br><code>&gt;&gt; ldd cv2.cpython-37m-arm-linux-gnueabihf.so | grep &quot;not found&quot;</code><br>Out::</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">libQtTest.so.4 =&gt; not found</span><br></pre></td></tr></table></figure>

<h1 id="Step3"><a href="#Step3" class="headerlink" title="Step3:"></a>Step3:</h1><p>安裝 <code>apt-file</code><br><code>&gt;&gt; sudo apt install apt-file</code></p>
<h1 id="Step4"><a href="#Step4" class="headerlink" title="Step4:"></a>Step4:</h1><p>搜尋套件:<br><code>&gt;&gt; apt-file search libQtTest.so.4</code><br>Out::(冒號前面是套件名稱)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">libqt4-test: /usr/lib/arm-linux-gnueabihf/libQtTest.so.4</span><br><span class="line">libqt4-test: /usr/lib/arm-linux-gnueabihf/libQtTest.so.4.8</span><br><span class="line">libqt4-test: /usr/lib/arm-linux-gnueabihf/libQtTest.so.4.8.7</span><br></pre></td></tr></table></figure>

<h1 id="Step5"><a href="#Step5" class="headerlink" title="Step5:"></a>Step5:</h1><p>安裝缺少的套件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt; sudo apt install libqt-4-test</span><br></pre></td></tr></table></figure>
<p>直到所有套件都安裝即可<br>— — — — — — — — — — — — — — — — — — -</p>
<h1 id="若出現"><a href="#若出現" class="headerlink" title="若出現:"></a>若出現:</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last): File <span class="string">"&lt;stdin&gt;"</span>, line 1,</span><br><span class="line"> <span class="keyword">in</span> &lt;module&gt; ImportError: /usr/<span class="built_in">local</span>/lib/python3.7/site-packages/</span><br><span class="line"> cv2/cv2.cpython-37m-arm-linux-gnueabihf.so: undefined symbol: </span><br><span class="line"> __atomic_fetch_add_8</span><br></pre></td></tr></table></figure>
<p>則可嘗試:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt; pip install opencv-python==3.4.6.27</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Opencv</category>
      </categories>
      <tags>
        <tag>Install</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript — var let</title>
    <url>/2020/05/17/JavaScript-var_let/</url>
    <content><![CDATA[<p>JavaScript 中有其中兩種宣告分別是 <code>var</code> 跟 <code>let</code></p>
<h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//var 在 if 外印出時</span></span><br></pre></td></tr></table></figure>
<p>結果:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br></pre></td></tr></table></figure>
<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//let 在 if 外印出時</span></span><br></pre></td></tr></table></figure>
<p>結果:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a is not defined</span><br></pre></td></tr></table></figure>
<p>** <code>let</code> 是一種區塊的變數宣告像是 <code>if else while for</code> 即跳出區塊時就無法取得資料</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Programming</tag>
        <tag>Compare</tag>
      </tags>
  </entry>
  <entry>
    <title>Tf — Choice Top-k methods</title>
    <url>/2020/05/17/Py-tf_topk/</url>
    <content><![CDATA[<h1 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1:"></a>Method 1:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = tf.constant([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>], [<span class="number">100</span>, <span class="number">99</span>, <span class="number">98</span>,</span><br><span class="line">                     <span class="number">97</span>, <span class="number">96</span>, <span class="number">95</span>, <span class="number">94</span>, <span class="number">93</span>, <span class="number">92</span>, <span class="number">91</span>]])</span><br><span class="line">value, ids = tf.nn.top_k(data, <span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>Output:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[ <span class="number">10</span>   <span class="number">9</span>   <span class="number">8</span>   <span class="number">7</span>   <span class="number">6</span>   <span class="number">5</span>   <span class="number">4</span>   <span class="number">3</span>]</span><br><span class="line"> [<span class="number">100</span>  <span class="number">99</span>  <span class="number">98</span>  <span class="number">97</span>  <span class="number">96</span>  <span class="number">95</span>  <span class="number">94</span>  <span class="number">93</span>]]</span><br></pre></td></tr></table></figure>

<h1 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2:"></a>Method 2:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = tf.constant([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>], [<span class="number">100</span>, <span class="number">99</span>, <span class="number">98</span>, </span><br><span class="line">                    <span class="number">97</span>, <span class="number">96</span>, <span class="number">95</span>, <span class="number">94</span>, <span class="number">93</span>, <span class="number">92</span>, <span class="number">91</span>]])</span><br><span class="line">sorted_data = tf.sort(data, direction=<span class="string">'DESCENDING'</span>)</span><br><span class="line">data_range = tf.range(<span class="number">0</span>, sorted_data.shape[<span class="number">1</span>], <span class="number">1</span>)</span><br><span class="line">data_range = tf.expand_dims(data_range, <span class="number">0</span>)</span><br><span class="line">data_range = tf.tile(data_range, [sorted_data.shape[<span class="number">0</span>], <span class="number">1</span>])</span><br><span class="line">out = tf.where(tf.less(data_range, <span class="number">6</span>), sorted_data, tf.zeros_like(sorted_data))</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[ <span class="number">10</span>   <span class="number">9</span>   <span class="number">8</span>   <span class="number">7</span>   <span class="number">6</span>   <span class="number">5</span>   <span class="number">0</span>   <span class="number">0</span>   <span class="number">0</span>   <span class="number">0</span>]</span><br><span class="line"> [<span class="number">100</span>  <span class="number">99</span>  <span class="number">98</span>  <span class="number">97</span>  <span class="number">96</span>  <span class="number">95</span>   <span class="number">0</span>   <span class="number">0</span>   <span class="number">0</span>   <span class="number">0</span>]]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Tensorflow</category>
      </categories>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyqt5 All DropAction Image</title>
    <url>/2020/05/18/Pyqt5-All_DropAction_Image/</url>
    <content><![CDATA[<h1 id="Use-method"><a href="#Use-method" class="headerlink" title="Use method:"></a>Use method:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">event.setDropAction(QtCore.Qt.MoveAction)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="Image"><a href="#Image" class="headerlink" title="Image:"></a>Image:</h1><p><img src="/images/pyqt5/Action/ActionMask.png" alt="ActionMask"></p>
<p><img src="/images/pyqt5/Action/CopyAction.png" alt="CopyAction"></p>
<p><img src="/images/pyqt5/Action/IgnoreAction.png" alt="IgnoreAction"></p>
<p><img src="/images/pyqt5/Action/LinkAction.png" alt="LinkAction"></p>
<p><img src="/images/pyqt5/Action/MoveAction.png" alt="MoveAction"></p>
<p><img src="/images/pyqt5/Action/TargetMoveAction.png" alt="TargetMoveAction"></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Pyqt5</category>
      </categories>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyqt5 All Cursor Image</title>
    <url>/2020/05/18/Pyqt5_All_Cursor_Image/</url>
    <content><![CDATA[<h1 id="Use-method"><a href="#Use-method" class="headerlink" title="Use method:"></a>Use method:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="Image"><a href="#Image" class="headerlink" title="Image:"></a>Image:</h1><p><img src="/images/pyqt5/Cursor/ArrowCursor.png" alt="ArrowCursor"></p>
<p><img src="/images/pyqt5/Cursor/ArrowCursor.png" alt="BitmapCursor"></p>
<p><img src="/images/pyqt5/Cursor/BlankCursor.png" alt="BlankCursor"></p>
<p><img src="/images/pyqt5/Cursor/BusyCursor.png" alt="BusyCursor"></p>
<p><img src="/images/pyqt5/Cursor/ClosedHandCursor.png" alt="ClosedHandCursor"></p>
<p><img src="/images/pyqt5/Cursor/CrossCursor.png" alt="CrossCursor"></p>
<p><img src="/images/pyqt5/Cursor/DragCopyCursor.png" alt="DragCopyCursor"></p>
<p><img src="/images/pyqt5/Cursor/DragLinkCursor.png" alt="DragLinkCursor"></p>
<p><img src="/images/pyqt5/Cursor/DragMoveCursor.png" alt="DragMoveCursor"></p>
<p><img src="/images/pyqt5/Cursor/ForbiddenCursor.png" alt="ForbiddenCursor"></p>
<p><img src="/images/pyqt5/Cursor/IBeamCursor.png" alt="IBeamCursor"></p>
<p><img src="/images/pyqt5/Cursor/LastCursor.png" alt="LastCursor"></p>
<p><img src="/images/pyqt5/Cursor/OpenHandCursor.png" alt="OpenHandCursor"></p>
<p><img src="/images/pyqt5/Cursor/PointingHandCursor.png" alt="PointingHandCursor"></p>
<p><img src="/images/pyqt5/Cursor/SizeAllCursor.png" alt="SizeAllCursor"></p>
<p><img src="/images/pyqt5/Cursor/SizeBDiagCursor.png" alt="SizeBDiagCursor"></p>
<p><img src="/images/pyqt5/Cursor/SizeFDiagCursor.png" alt="SizeFDiagCursor"></p>
<p><img src="/images/pyqt5/Cursor/SizeHorCursor.png" alt="SizeHorCursor"></p>
<p><img src="/images/pyqt5/Cursor/SizeVerCursor.png" alt="SizeVerCursor"></p>
<p><img src="/images/pyqt5/Cursor/SplitHCursor.png" alt="SplitHCursor"></p>
<p><img src="/images/pyqt5/Cursor/SplitVCursor.png" alt="SplitVCursor"></p>
<p><img src="/images/pyqt5/Cursor/UpArrowCursor.png" alt="UpArrowCursor"></p>
<p><img src="/images/pyqt5/Cursor/WaitCursor.png" alt="WaitCursor"></p>
<p><img src="/images/pyqt5/Cursor/WhatsThisCursor.png" alt="WhatsThisCursor"></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Pyqt5</category>
      </categories>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Python — Numpy max() maximum()</title>
    <url>/2020/05/17/Python-Numpy_max_maximum/</url>
    <content><![CDATA[<p>Max和Maximum的差別為:</p>
<h3 id="np-max"><a href="#np-max" class="headerlink" title="np.max()"></a>np.max()</h3><p>最少接收一個參數，回傳所有內容的最大值</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">value = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>]</span><br><span class="line">print(np.max(value))</span><br></pre></td></tr></table></figure>
<p>結果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<h3 id="np-maximum-A-B"><a href="#np-maximum-A-B" class="headerlink" title="np.maximum(A, B)"></a>np.maximum(A, B)</h3><p>最少接收兩個參數，回傳A與B逐個比較的最大值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">value = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">8</span>]</span><br><span class="line">print(np.maximum(value, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p>結果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span> <span class="number">4</span> <span class="number">9</span> <span class="number">4</span> <span class="number">8</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Numpy</category>
      </categories>
      <tags>
        <tag>Programming</tag>
        <tag>Compare</tag>
      </tags>
  </entry>
  <entry>
    <title>Python — OpenCV基本用法</title>
    <url>/2020/05/18/Python-OpenCV%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="載入模組"><a href="#載入模組" class="headerlink" title="載入模組:"></a>載入模組:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="讀取圖片"><a href="#讀取圖片" class="headerlink" title="讀取圖片:"></a>讀取圖片:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">'./Images/test.jpg'</span>)</span><br><span class="line"><span class="comment">#讀取為灰階圖片</span></span><br><span class="line">img = cv2.imread(<span class="string">'./Images/test.jpg'</span>, cv2.IMREAD_GRAYSCALE)</span><br></pre></td></tr></table></figure>

<h1 id="顯示圖片"><a href="#顯示圖片" class="headerlink" title="顯示圖片:"></a>顯示圖片:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imshow(<span class="string">'Image title'</span>, img) <span class="comment">#只要 Title 不一樣就會另開視窗</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)           <span class="comment">#等待按下隨機按鍵才繼續執行，否則圖片會閃一下就消失</span></span><br><span class="line">cv2.destroyAllWindows()  <span class="comment">#關閉所有cv2視窗</span></span><br></pre></td></tr></table></figure>

<h1 id="圖片處理"><a href="#圖片處理" class="headerlink" title="圖片處理:"></a>圖片處理:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img2 = img + <span class="number">100</span>          <span class="comment">#若直接ndarray相加，則數值可能會過大，而顏色錯誤</span></span><br><span class="line">img3 = cv2.add(img, <span class="number">100</span>)  <span class="comment">#使用cv2模組則不會出錯</span></span><br><span class="line">img4 = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) <span class="comment">#轉為灰階圖片</span></span><br><span class="line">img5 = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  <span class="comment">#轉為 RGB 圖片</span></span><br></pre></td></tr></table></figure>

<h1 id="提取Pixel"><a href="#提取Pixel" class="headerlink" title="提取Pixel:"></a>提取Pixel:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#提取灰階圖座標點(100, 100)的 Pixel</span></span><br><span class="line"><span class="comment">#若圖片非灰階圖則產生Error</span></span><br><span class="line">x = img.item((<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment">#提取彩色圖片座標點(100, 100)的第一通道(若此圖片為 BGR 則為提取B)</span></span><br><span class="line">x1 = img.item((<span class="number">100</span>, <span class="number">100</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<h1 id="設置Pixel"><a href="#設置Pixel" class="headerlink" title="設置Pixel:"></a>設置Pixel:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#設置灰階圖座標點(100, 100)的 Pixel 為200</span></span><br><span class="line"><span class="comment">#若圖片非灰階圖則產生Error</span></span><br><span class="line">img.itemset((<span class="number">100</span>, <span class="number">100</span>), <span class="number">200</span>)</span><br><span class="line"><span class="comment">#設置彩色圖片座標點(100, 100)的第一通道為200(若此圖片為 BGR 則為設置B)</span></span><br><span class="line">img.itemset((<span class="number">100</span>, <span class="number">100</span>, <span class="number">0</span>), <span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<h1 id="提取BGR"><a href="#提取BGR" class="headerlink" title="提取BGR:"></a>提取BGR:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = img[:,:,<span class="number">0</span>]</span><br><span class="line">g = img[:,:,<span class="number">1</span>]</span><br><span class="line">r = img[:,:,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<h1 id="Complement-正負片轉換，即黑白對調"><a href="#Complement-正負片轉換，即黑白對調" class="headerlink" title="Complement(正負片轉換，即黑白對調):"></a>Complement(正負片轉換，即黑白對調):</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cm = np.zeros(img.shape, np.uint8) + <span class="number">255</span>  <span class="comment">#產生和 img 同等大小的255陣列</span></span><br><span class="line">img6 = cv2.scaleAdd(img, <span class="number">-1</span>, cm)          <span class="comment">#圖片處理為:y = -1 * x + 255</span></span><br></pre></td></tr></table></figure>

<h1 id="計算-Pixel-在數值-0-255-個別的總數量"><a href="#計算-Pixel-在數值-0-255-個別的總數量" class="headerlink" title="計算 Pixel 在數值(0~255)個別的總數量:"></a>計算 Pixel 在數值(0~255)個別的總數量:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可為多個影像</span></span><br><span class="line"><span class="comment">#       cv2.calcHist(影像, 通道, 遮罩, 區間數量, 數值範圍)</span></span><br><span class="line">pixel = cv2.calcHist([img], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br></pre></td></tr></table></figure>

<h1 id="畫圖表"><a href="#畫圖表" class="headerlink" title="畫圖表:"></a>畫圖表:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment">#載入模組</span></span><br><span class="line">plt.plot(pixel)                  <span class="comment">#畫圖</span></span><br><span class="line">plt.xlim([<span class="number">0</span>, <span class="number">256</span>])               <span class="comment">#設置X軸座標範圍</span></span><br><span class="line">plt.xlabel(<span class="string">'Pixel'</span>)              <span class="comment">#設置X軸文字</span></span><br><span class="line">plt.ylabel(<span class="string">'Count'</span>)              <span class="comment">#設置Y軸文字</span></span><br><span class="line">plt.show()                       <span class="comment">#顯示圖表</span></span><br></pre></td></tr></table></figure>

<h1 id="直方圖"><a href="#直方圖" class="headerlink" title="直方圖:"></a>直方圖:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment">#載入模組</span></span><br><span class="line">plt.bar([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">256</span>)], [x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> pixel]) <span class="comment">#畫直方圖</span></span><br><span class="line">plt.xlim([<span class="number">0</span>, <span class="number">256</span>])               <span class="comment">#設置X軸座標範圍</span></span><br><span class="line">plt.xlabel(<span class="string">'Pixel'</span>)              <span class="comment">#設置X軸文字</span></span><br><span class="line">plt.ylabel(<span class="string">'Count'</span>)              <span class="comment">#設置Y軸文字</span></span><br><span class="line">plt.show()                       <span class="comment">#顯示圖表</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Opencv</category>
      </categories>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyinstaller 使用方法</title>
    <url>/2020/05/18/Python-Pyinstaller_%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="常用語法"><a href="#常用語法" class="headerlink" title="常用語法:"></a>常用語法:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyinstaller -F C:/Users/Name/Desktop/example.py</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>在使用此語法後程式會生成一個 <code>spec</code> 檔案，紀錄相關資料的打包<br>設定，設定完後會自動執行 <code>spec</code> 檔案，所以也可以直接修改 <code>spec</code><br>檔案進行打包:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyinstaller -F C:/Users/Name/Desktop/example.spec</span><br></pre></td></tr></table></figure>

<ul>
<li>其他常用指令<ul>
<li>-F → 打包為單一可執行文件</li>
<li>-i → 圖示，只適用於 Windows 平台</li>
<li>-w →不出現命令行</li>
<li>-D → 打包為一個文件夾</li>
<li>-n → 生成文件的名稱<br><code>pyinstaller</code> 執行後會生成兩個資料夾 <code>build</code> 和 <code>dist</code> 跟一個 <code>spec</code> 文件<br>其中 <code>build</code> 裡面的 <code>warn-xxx.txt</code> 可查看執行 pyinstaller 過程的錯誤訊息，<br><code>xref-xxx.html</code> 可查看 import 模塊的依賴關係。</li>
</ul>
</li>
</ul>
<p>生成的 <code>EXE</code> 檔案會存放在 <code>dist</code> 資料夾裡。<br><code>spec</code> 是相關設定例如 :</p>
<ul>
<li>加入其他附加檔案</li>
<li>指定不載入模塊 → <code>excludes = [&#39;pandas&#39;]</code></li>
<li>不顯示命令列 → <code>console = False</code><br><code>spec</code> 格式:<br>使用 <code>-F</code> 生成的單一文件格式:</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">a = Analysis(['C:\\Users\\Example.py'],        -&gt; 檔案名稱絕對路徑</span><br><span class="line">             pathex=['C:\\Users\\work'],       -&gt; 生成檔案的絕對路徑</span><br><span class="line">             binaries=[],</span><br><span class="line">             datas=[(<span class="string">'free'</span>, <span class="string">'.'</span>), (<span class="string">'file.mp3'</span>, <span class="string">'.'</span>)],</span><br><span class="line">                -&gt; 將 free 目錄和 file.mp3 都放到打包後放資源的指定資料夾</span><br><span class="line">             hiddenimports=[],</span><br><span class="line">             hookspath=[],</span><br><span class="line">             runtime_hooks=[],</span><br><span class="line">             excludes=['pandas'],              -&gt; 不載入的模塊</span><br><span class="line">             win_no_prefer_redirects=<span class="literal">False</span>,</span><br><span class="line">             win_private_assemblies=<span class="literal">False</span>,</span><br><span class="line">             cipher=block_cipher,</span><br><span class="line">             noarchive=<span class="literal">False</span>)</span><br><span class="line">pyz = PYZ(a.pure, a.zipped_data,</span><br><span class="line">             cipher=block_cipher)</span><br><span class="line">exe = EXE(pyz,</span><br><span class="line">          a.scripts,</span><br><span class="line">          a.binaries,</span><br><span class="line">          a.zipfiles,</span><br><span class="line">          a.datas,</span><br><span class="line">          [],          -&gt; 想添加的文件格式為 (相對路徑,絕對路徑,'data')</span><br><span class="line">          name='Example',                     -&gt; 生成的EXE檔案名稱</span><br><span class="line">          debug=False,                        -&gt; 除錯模式</span><br><span class="line">          bootloader_ignore_signals=<span class="literal">False</span>,</span><br><span class="line">          strip=<span class="literal">False</span>,</span><br><span class="line">          upx=<span class="literal">True</span>,</span><br><span class="line">          upx_exclude=[],</span><br><span class="line">          runtime_tmpdir=<span class="literal">None</span>,</span><br><span class="line">          console=False,                      -&gt; 不顯示命令列</span><br><span class="line">          icon='C:\\Users\\example.ico')      -&gt; 設定圖示</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Pyinstaller</category>
      </categories>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyqt5 基本視窗</title>
    <url>/2020/05/18/Python-Pyqt5_%E5%9F%BA%E6%9C%AC%E8%A6%96%E7%AA%97/</url>
    <content><![CDATA[<p>有三種常用的視窗 <code>QWidget</code> 、 <code>QMainWindow</code> 、 <code>QDialog</code><br><code>QWidget</code> 和 <code>QMainWindow</code> 基本上長的一樣，但 <code>QMainWindow</code> 可加入狀態<br>列、選單欄、標題欄是 <strong>GUI 的主視窗</strong><br><code>QWidget</code> 可為單一視窗也可嵌入到其他視窗內<br><code>QDialog</code> <strong>沒有</strong>選單欄、工具欄、狀態列，標題欄的<br><strong>最小化、最大化按鈕改為問號按鈕</strong></p>
<a id="more"></a>

<h1 id="QWidget"><a href="#QWidget" class="headerlink" title="QWidget:"></a>QWidget:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets, QtCore, QtGui</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span><span class="params">(QtWidgets.QWidget)</span>:</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">  super().__init__()</span><br><span class="line">  self.setupUi()</span><br><span class="line">  self.show()    <span class="comment">#有 show 才會顯示出視窗</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.resize(<span class="number">200</span>, <span class="number">200</span>) <span class="comment">#設定大小</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">window = MyWindow() <span class="comment">#開始創建視窗</span></span><br><span class="line">sys.exit(app.exec_()) <span class="comment">#有這行才會保持開啟狀態，否則會閃一下就關閉</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Pyqt5_basewindow/step1.png" alt="QWidget基本視窗"></p>
<h1 id="QMainWindow"><a href="#QMainWindow" class="headerlink" title="QMainWindow:"></a>QMainWindow:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets, QtCore, QtGui</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span><span class="params">(QtWidgets.QMainWindow)</span>:</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">  super().__init__()</span><br><span class="line">  self.setupUi()</span><br><span class="line">  self.show()    <span class="comment">#有 show 才會顯示出視窗</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.resize(<span class="number">200</span>, <span class="number">200</span>) <span class="comment">#設定大小</span></span><br><span class="line">  self.status=self.statusBar()</span><br><span class="line">  self.status.showMessage(<span class="string">"狀態列"</span>, <span class="number">3000</span>) <span class="comment">#在狀態列顯示文字"狀態列" 3秒</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">window = MyWindow() <span class="comment">#開始創建視窗</span></span><br><span class="line">sys.exit(app.exec_()) <span class="comment">#有這行才會保持開啟狀態，否則會閃一下就關閉</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Pyqt5_basewindow/step2.png" alt="QMainWindow基本視窗"></p>
<h1 id="QDialog"><a href="#QDialog" class="headerlink" title="QDialog:"></a>QDialog:</h1><p><code>QDialog</code> 的使用跟上面 <code>QWidget</code> 一樣只是繼承的 <code>QtWidgets.QWidget</code> 換成<br> <code>QtWidgets.QDialog</code><br><img src="/images/Pyqt5_basewindow/step3.png" alt="QDialog基本視窗"></p>
<h1 id="其他常用到的視窗參數"><a href="#其他常用到的視窗參數" class="headerlink" title="其他常用到的視窗參數:"></a>其他常用到的視窗參數:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.setFixedSize(width, height) <span class="comment">#固定視窗的大小，不可縮放</span></span><br><span class="line">self.setWindowTitle(<span class="string">'window'</span>)    <span class="comment">#設定視窗標題</span></span><br><span class="line">self.setWindowFlag(QtCore.Qt.FramelessWindowHint)  <span class="comment">#變成無邊框視窗</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Pyqt5</category>
      </categories>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyqt5 視窗縮放和關閉事件</title>
    <url>/2020/05/18/Python-Pyqt5_%E8%A6%96%E7%AA%97%E7%B8%AE%E6%94%BE%E5%92%8C%E9%97%9C%E9%96%89%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<p>視窗縮放時會觸發 <code>resizeEvent</code> ，而視窗關閉時會觸發 <code>closeEvent</code> 因此有物件要在視窗縮放或關閉時操作就寫入這些function裡</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets, QtGui, QtCore</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span><span class="params">(QtWidgets.QMainWindow)</span>:</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">  super().__init__()</span><br><span class="line">  self.setupUi()</span><br><span class="line">  self.show()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.resize(<span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resizeEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">  print(<span class="string">'resize'</span>)</span><br><span class="line">  width, height = event.size().width(), event.size().height()</span><br><span class="line">  print(event.size())</span><br><span class="line">  print(width, height)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">closeEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">  print(<span class="string">'window close'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"> <span class="keyword">import</span> sys</span><br><span class="line"> app = QtWidgets.QApplication(sys.argv)</span><br><span class="line"> window = MyWindow()</span><br><span class="line"> sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Pyqt5</category>
      </categories>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Tf1 — Graph Memory leak</title>
    <url>/2020/05/17/Python-Tf1_Graph_Memory_leak/</url>
    <content><![CDATA[<p>當使用tf.Graph()想刪除特定節點卻只能畫新的圖<br>而使用到了 <code>del</code><br>Memory 依舊會緩慢上升直到 OOM</p>
<a id="more"></a>

<h1 id="Ex"><a href="#Ex" class="headerlink" title="Ex:"></a>Ex:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line"> g = tf.Graph()</span><br><span class="line"> <span class="keyword">with</span> g.as_default():</span><br><span class="line">  v = tf.Variable(<span class="number">100</span>)</span><br><span class="line">  c = tf.Variable(<span class="number">200</span>)</span><br><span class="line"> <span class="keyword">del</span> g</span><br></pre></td></tr></table></figure>
<h1 id="Sol"><a href="#Sol" class="headerlink" title="Sol:"></a>Sol:</h1><p>使用 <code>gc.collect()</code> 手動清理緩存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line"> g = tf.Graph()</span><br><span class="line"> <span class="keyword">with</span> g.as_default():</span><br><span class="line">  v = tf.Variable(<span class="number">100</span>)</span><br><span class="line">  c = tf.Variable(<span class="number">200</span>)</span><br><span class="line"> <span class="keyword">del</span> g</span><br><span class="line"> gc.collect()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Tensorflow</category>
      </categories>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Tf — scatter_nd, Numpy</title>
    <url>/2020/05/17/Python-Tf_scatter_nd_Numpy/</url>
    <content><![CDATA[<p>Tensorflow 中的 <code>tf.scatter_nd</code> 是一種更新張量的方法</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">indices = tf.constant([[<span class="number">3</span>], [<span class="number">1</span>], [<span class="number">5</span>], [<span class="number">7</span>]])</span><br><span class="line">updates = tf.constant([<span class="number">100</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">700</span>])</span><br><span class="line">shape = tf.constant([<span class="number">10</span>])</span><br><span class="line">scatter = tf.scatter_nd(indices, updates, shape)</span><br></pre></td></tr></table></figure>
<p>在 Numpy 中的方法為:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">ids = np.array([<span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line">update = np.array([<span class="number">100</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">700</span>])</span><br><span class="line">data = np.zeros([<span class="number">10</span>])</span><br><span class="line">data[ids] = update</span><br></pre></td></tr></table></figure>
<p>兩種方法結果都一樣，只是因 Tensorflow 不可直接透過索引值修改內容</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Tensorflow</category>
      </categories>
      <tags>
        <tag>Programming</tag>
        <tag>Compare</tag>
      </tags>
  </entry>
  <entry>
    <title>Python — *args 和 **kwargs</title>
    <url>/2020/05/17/Python-args_kwargs/</url>
    <content><![CDATA[<h3 id="在寫Python時，常會遇到需要傳不固定的參數值，這時-args-和-kwargs-就發揮得很大的功效。"><a href="#在寫Python時，常會遇到需要傳不固定的參數值，這時-args-和-kwargs-就發揮得很大的功效。" class="headerlink" title="在寫Python時，常會遇到需要傳不固定的參數值，這時 *args 和 **kwargs 就發揮得很大的功效。"></a>在寫Python時，常會遇到需要傳不固定的參數值，這時 <code>*args</code> 和 <code>**kwargs</code> 就發揮得很大的功效。</h3><p>這兩個都是可變參數，不同的地方是:<br>args是非鍵值的參數，也就是傳一般的值但是長度是可變的</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b, *args)</span>:</span></span><br><span class="line">  print(<span class="string">'a'</span>, a)</span><br><span class="line">  print(<span class="string">'b'</span>, b)</span><br><span class="line">  print(<span class="string">'args'</span>, args)</span><br><span class="line">  print(type(args))</span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<p>結果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a <span class="number">1</span></span><br><span class="line">b <span class="number">2</span></span><br><span class="line">args (<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br></pre></td></tr></table></figure>
<p>在此函數中我們固定了前兩個的傳值數量，剩下傳入的值都會歸args所有<br>**注意args是tuple型態</p>
<h3 id="kwargs-是屬於鍵值的參數就是字典-dict"><a href="#kwargs-是屬於鍵值的參數就是字典-dict" class="headerlink" title="**kwargs 是屬於鍵值的參數就是字典(dict)"></a><code>**kwargs</code> 是屬於鍵值的參數就是字典(dict)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b, **kwargs)</span>:</span></span><br><span class="line">  print(<span class="string">'a'</span>, a)</span><br><span class="line">  print(<span class="string">'b'</span>, b)</span><br><span class="line">  print(<span class="string">'kwargs'</span>, kwargs)</span><br><span class="line">  print(type(kwargs))</span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, z=<span class="number">9</span>, y=<span class="number">8</span>, x=<span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<p>結果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a <span class="number">1</span></span><br><span class="line">b <span class="number">2</span></span><br><span class="line">kwargs &#123;<span class="string">'z'</span>: <span class="number">9</span>, <span class="string">'y'</span>: <span class="number">8</span>, <span class="string">'x'</span>: <span class="number">7</span>&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br></pre></td></tr></table></figure>
<p>所謂字典(dict)就是長這樣的, 前面是key值後面是value值，在此函數中我們固定了前兩個的傳值數量，剩下傳入的key=value值都會歸kwargs所有</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">'z'</span>: <span class="number">9</span>, <span class="string">'y'</span>: <span class="number">8</span>, <span class="string">'x'</span>: <span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure>
<p>**注意傳入時的key值不可和函數內固定的參數名稱重複<br>若在一個函數需要用到兩個可變參數時:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b, *args, **kwargs)</span>:</span></span><br><span class="line">  print(<span class="string">'a'</span>, a)</span><br><span class="line">  print(<span class="string">'b'</span>, b)</span><br><span class="line">  print(<span class="string">'args'</span>, args)</span><br><span class="line">  print(<span class="string">'kwargs'</span>, kwargs)</span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, z=<span class="number">9</span>, y=<span class="number">8</span>, x=<span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<p>結果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a <span class="number">1</span></span><br><span class="line">b <span class="number">2</span></span><br><span class="line">args (<span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>)</span><br><span class="line">kwargs &#123;<span class="string">'z'</span>: <span class="number">9</span>, <span class="string">'y'</span>: <span class="number">8</span>, <span class="string">'x'</span>: <span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure>
<p><strong>要注意 <code>*args</code> 一定要在 `</strong>kwargs` 前面否則會出現錯誤!</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Programming</tag>
        <tag>Compare</tag>
      </tags>
  </entry>
  <entry>
    <title>Python — list</title>
    <url>/2020/05/17/Python-list/</url>
    <content><![CDATA[<p>-extend() append() insert()<br>在 Python 中 List 是常常會用到的，其中 List 的一個功能是 extend<br>使用方法如下:</p>
<a id="more"></a>

<p>###使用 String 型別</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">List = list([<span class="string">'value'</span>])</span><br><span class="line">print(List)</span><br><span class="line">List.extend(<span class="string">'string'</span>)</span><br><span class="line">print(List)</span><br></pre></td></tr></table></figure>
<p>結果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'value'</span>]</span><br><span class="line">[<span class="string">'value'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'r'</span>, <span class="string">'i'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>]</span><br></pre></td></tr></table></figure>
<p>extend將會分割每個字元放入</p>
<p>###使用 List 型別</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">List = list([<span class="string">'value'</span>])</span><br><span class="line">print(List)</span><br><span class="line">List.extend([<span class="string">'hello'</span>, <span class="string">'world'</span>])</span><br><span class="line">print(List)</span><br></pre></td></tr></table></figure>
<p>結果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'value'</span>]</span><br><span class="line">[<span class="string">'value'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br></pre></td></tr></table></figure>
<p>extend將會把每個陣列內容放入</p>
<p>###使用 Tuple 型別</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">List = list([<span class="string">'value'</span>])</span><br><span class="line">print(List)</span><br><span class="line">List.extend((<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'tuple'</span>))</span><br><span class="line">print(List)</span><br></pre></td></tr></table></figure>
<p>結果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;value&#39;]</span><br><span class="line">[&#39;value&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;tuple&#39;]</span><br></pre></td></tr></table></figure>
<p>結果將會和List一樣</p>
<p>###使用 Dict 型別</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">List = list([<span class="string">'value'</span>])</span><br><span class="line">print(List)</span><br><span class="line">List.extend(&#123;<span class="string">'hello'</span>:<span class="string">'world'</span>, <span class="string">'dict'</span>:<span class="string">'tuple'</span>&#125;)</span><br><span class="line">print(List)</span><br></pre></td></tr></table></figure>
<p>結果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'value'</span>]</span><br><span class="line">[<span class="string">'value'</span>, <span class="string">'hello'</span>, <span class="string">'dict'</span>]</span><br></pre></td></tr></table></figure>
<p>extend將只會把key值傳入而已</p>
<p>###接下來是append</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">List = list()</span><br><span class="line">print(List)</span><br><span class="line">List.append(<span class="string">'list'</span>)</span><br><span class="line">print(List)</span><br><span class="line">List.append(<span class="number">1</span>)</span><br><span class="line">print(List)</span><br><span class="line">List.append(&#123;<span class="string">'hello'</span>:<span class="string">'world'</span>&#125;)</span><br><span class="line">print(List)</span><br><span class="line">List.append((<span class="string">'this'</span>, <span class="string">'is'</span>, <span class="string">'tuple'</span>))</span><br><span class="line">print(List)</span><br><span class="line">List.append([<span class="string">'this'</span>, <span class="string">'is'</span>, <span class="string">'list'</span>])</span><br><span class="line">print(List)</span><br></pre></td></tr></table></figure>
<p>結果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[]</span><br><span class="line">[<span class="string">'list'</span>]</span><br><span class="line">[<span class="string">'list'</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="string">'list'</span>, <span class="number">1</span>, &#123;<span class="string">'hello'</span>: <span class="string">'world'</span>&#125;]</span><br><span class="line">[<span class="string">'list'</span>, <span class="number">1</span>, &#123;<span class="string">'hello'</span>: <span class="string">'world'</span>&#125;, (<span class="string">'this'</span>, <span class="string">'is'</span>, <span class="string">'tuple'</span>)]</span><br><span class="line">[<span class="string">'list'</span>, <span class="number">1</span>, &#123;<span class="string">'hello'</span>: <span class="string">'world'</span>&#125;, (<span class="string">'this'</span>, <span class="string">'is'</span>, <span class="string">'tuple'</span>), [<span class="string">'this'</span>, <span class="string">'is'</span>, <span class="string">'list'</span>]]</span><br></pre></td></tr></table></figure>
<p>**不管什麼型別資料只會放入最後，且一次只能傳一個參數</p>
<p>###最後就是insert<br>使用 Int 和 String 型別</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">List = list([<span class="string">'value'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>])</span><br><span class="line">print(List)</span><br><span class="line">List.insert(<span class="number">1</span>, <span class="number">22</span>)</span><br><span class="line">print(List)</span><br><span class="line">List.insert(<span class="number">1</span>, <span class="string">'insert'</span>)</span><br><span class="line">print(List)</span><br></pre></td></tr></table></figure>
<p>結果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'value'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br><span class="line">[<span class="string">'value'</span>, <span class="number">22</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br><span class="line">[<span class="string">'value'</span>, <span class="string">'insert'</span>, <span class="number">22</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br></pre></td></tr></table></figure>
<p>新加入的資料內容就被依序插入至第一個陣列內容<br>使用 List 和 Tuple 型別</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">List = list([<span class="string">'value'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>])</span><br><span class="line">print(List)</span><br><span class="line">List.insert(<span class="number">1</span>, [<span class="string">'insert'</span>, <span class="string">'list'</span>])</span><br><span class="line">print(List)</span><br><span class="line">List.insert(<span class="number">1</span>, (<span class="string">'insert'</span>, <span class="string">'tuple'</span>))</span><br><span class="line">print(List)</span><br></pre></td></tr></table></figure>
<p>結果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'value'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br><span class="line">[<span class="string">'value'</span>, [<span class="string">'insert'</span>, <span class="string">'list'</span>], <span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br><span class="line">[<span class="string">'value'</span>, (<span class="string">'insert'</span>, <span class="string">'tuple'</span>), [<span class="string">'insert'</span>, <span class="string">'list'</span>], <span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br></pre></td></tr></table></figure>
<p>使用 Dict 型別</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">List = list([<span class="string">'value'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>])</span><br><span class="line">print(List)</span><br><span class="line">List.insert(<span class="number">1</span>, &#123;<span class="string">'insert'</span>:<span class="number">1</span>, <span class="string">'dict'</span>:<span class="number">2</span>&#125;)</span><br><span class="line">print(List)</span><br></pre></td></tr></table></figure>
<p>結果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'value'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br><span class="line">[<span class="string">'value'</span>, &#123;<span class="string">'insert'</span>: <span class="number">1</span>, <span class="string">'dict'</span>: <span class="number">2</span>&#125;, <span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br></pre></td></tr></table></figure>
<p>**insert 不管什麼資料皆可原封不動插入至陣列</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Programming</tag>
        <tag>Compare</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Opencv and Matplotlib different</title>
    <url>/2020/05/17/Python-opencv_and_matplotlib_different/</url>
    <content><![CDATA[<p>*Opencv is use BGR color<br>*Matplotlib is use RGB color<br>顯示圖片</p>
<a id="more"></a>

<h3 id="Opencv"><a href="#Opencv" class="headerlink" title="Opencv"></a>Opencv</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img = Image.open(<span class="string">'Image.jpg'</span>)</span><br><span class="line">img = np.array(img)</span><br><span class="line">cv2.imshow(<span class="string">'img'</span>, img)</span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure>
<h3 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img = Image.open(<span class="string">'Image.jpg'</span>)</span><br><span class="line">img = np.array(img)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Programming</tag>
        <tag>Compare</tag>
      </tags>
  </entry>
  <entry>
    <title>Python — (tf/np).argmax()</title>
    <url>/2020/05/17/Python-tf_np_argmax/</url>
    <content><![CDATA[<p>Tensorflow 和 Numpy 中都有個 argmax()<br>兩種用法都一樣(差別在tensorflow 要用 <code>sess.run()</code> 啟動)下面只展示numpy<br>用法如下:</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>], [<span class="number">6</span>, <span class="number">5</span>, <span class="number">11</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], [<span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>]])</span><br><span class="line">print(<span class="string">'axis=0'</span>, np.argmax(arr, axis=<span class="number">0</span>))</span><br><span class="line">print(<span class="string">'axis=1'</span>, np.argmax(arr, axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># arr[0] = [1, 10,  3]</span></span><br><span class="line"><span class="comment"># arr[1] = [6,  5, 11]</span></span><br><span class="line"><span class="comment"># arr[2] = [7,  8,  9]</span></span><br><span class="line"><span class="comment"># arr[3] = [12, 2,  4]</span></span><br></pre></td></tr></table></figure>
<p>結果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">axis=<span class="number">0</span> [<span class="number">3</span> <span class="number">0</span> <span class="number">1</span>]</span><br><span class="line">axis=<span class="number">1</span> [<span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>*<em>當axis=0時，會比對在column中最大數字回傳它的索引值<br>*</em>當axis=1時，會比對在row中最大數字回傳它的索引值</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Tensorflow</category>
      </categories>
      <tags>
        <tag>Programming</tag>
        <tag>Compare</tag>
      </tags>
  </entry>
  <entry>
    <title>Python tkinter padx ipadx</title>
    <url>/2020/05/18/Python-tkinter_padx_ipadx/</url>
    <content><![CDATA[<h1 id="Button-attribute"><a href="#Button-attribute" class="headerlink" title="Button attribute"></a>Button attribute</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">button = tk.Button(root, text=<span class="string">'text'</span>)</span><br><span class="line">button.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, ipadx=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p><code>ipadx</code> 為 Button 框內的距離<br><code>padx</code> 為 Button 框外距離</p>
<h1 id="Window-attribute"><a href="#Window-attribute" class="headerlink" title="Window attribute"></a>Window attribute</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root.overredirect(<span class="literal">True</span>)<span class="comment">#隱藏放大縮小按鍵</span></span><br><span class="line">root.attributes(<span class="string">'-topmost'</span>, <span class="literal">True</span>)<span class="comment">#顯示最上層</span></span><br><span class="line">app.attributes(<span class="string">'-alpha'</span>, <span class="number">0.5</span>)<span class="comment">#透明度，1為不透明</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Tkinter</category>
      </categories>
      <tags>
        <tag>Programming</tag>
        <tag>Compare</tag>
      </tags>
  </entry>
  <entry>
    <title>Python virtualenv 虛擬環境安裝</title>
    <url>/2020/05/18/Python-virtualenv_%E8%99%9B%E6%93%AC%E7%92%B0%E5%A2%83%E5%AE%89%E8%A3%9D/</url>
    <content><![CDATA[<h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝:"></a>安裝:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="創建"><a href="#創建" class="headerlink" title="創建"></a>創建</h1><p>打開 cmd 到想創建虛擬環境的位置後輸入(name為自行取的虛擬環境名稱):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">virtualenv name</span><br></pre></td></tr></table></figure>
<p><img src="/images/Pyinstaller/step1.png" alt="虛擬環境創建成功"></p>
<p>進入 <code>name/Scripts</code> 資料夾輸入 <code>activate</code> 或是 <code>activate.bat</code> 啟動虛擬環境<br>命令列名稱前多了 <code>(name)</code> 就表示進入成功<br><img src="/images/Pyinstaller/step2.png" alt="進入虛擬環境"></p>
<p>這時就可以輸入 <code>pip freeze</code> 檢查現有的 package</p>
<h1 id="便利"><a href="#便利" class="headerlink" title="便利"></a>便利</h1><p>若嫌每次開啟方式太複雜，可直接將 <code>name/Scripts</code> 路徑增加至環境變數:<br><img src="/images/Pyinstaller/step3.png" alt="進入進階系統設定"></p>
<p><img src="/images/Pyinstaller/step4.png" alt="進入進階系統設定"></p>
<p><img src="/images/Pyinstaller/step5.png" alt="進入進階系統設定"></p>
<p>這樣便可直接使用 <code>activate</code> 或 <code>activate.bat</code> 進入虛擬環境，不必到 <code>name/Scripts</code> 裡面</p>
<h1 id="離開虛擬環境"><a href="#離開虛擬環境" class="headerlink" title="離開虛擬環境:"></a>離開虛擬環境:</h1><p>輸入 <code>deactivate</code> 即可離開虛擬環境</p>
<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>大部分是為了打包成EXE檔案時，避免其他不必要的package一起被打包</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Virtualenv</category>
      </categories>
      <tags>
        <tag>Install</tag>
      </tags>
  </entry>
  <entry>
    <title>Python — yield</title>
    <url>/2020/05/18/Python-yield/</url>
    <content><![CDATA[<p>定義一個函數，每次碰到 <code>yield</code> 時就會立即返回資料，可用 <code>next()</code> 呼叫<br>下一筆資料或放入 <code>for</code> 循環裡</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getYield</span><span class="params">(data)</span>:</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">yield</span> [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">yield</span> [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1:"></a>Method 1:</h1><p>用 <code>next()</code> 呼叫下一筆資料</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line">s = getYield(data)</span><br><span class="line">print(next(s))</span><br><span class="line">print(next(s))</span><br><span class="line">print(next(s))</span><br><span class="line">print(next(s))</span><br></pre></td></tr></table></figure>
<p>Output</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>
<p>因只有3筆資料但呼叫4次，循環過一遍就會呼叫 <code>StopIteration</code> ，使用<br><code>for</code> 就不會有這個問題</p>
<h1 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2:"></a>Method 2:</h1><p>放入 <code>for</code> 循環裡</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">  <span class="keyword">for</span> d <span class="keyword">in</span> getYield(data):</span><br><span class="line">    print(d)</span><br></pre></td></tr></table></figure>

<p>Output</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<h1 id="但要切記不可以把函數賦予某變數，否則無法迭代"><a href="#但要切記不可以把函數賦予某變數，否則無法迭代" class="headerlink" title="但要切記不可以把函數賦予某變數，否則無法迭代"></a><strong>但要切記不可以把函數賦予某變數，否則無法迭代</strong></h1><p>例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line">get = getYield(data)    <span class="comment">################</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">  <span class="keyword">for</span> d <span class="keyword">in</span> get:         <span class="comment">################</span></span><br><span class="line">    print(d)</span><br></pre></td></tr></table></figure>
<p>Output</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Python — 速度比較 numpy, 內置函數, numba</title>
    <url>/2020/05/17/Python-%E9%80%9F%E5%BA%A6%E6%AF%94%E8%BC%83_numpy_%E5%85%A7%E7%BD%AE%E5%87%BD%E6%95%B8_numba/</url>
    <content><![CDATA[<h1 id="比較每個加、減、乘、除的運算速度"><a href="#比較每個加、減、乘、除的運算速度" class="headerlink" title="比較每個加、減、乘、除的運算速度"></a>比較每個加、減、乘、除的運算速度</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numba <span class="keyword">import</span> jit</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">base_list = &#123;<span class="string">'add'</span>:list(), <span class="string">'sub'</span>:list(), <span class="string">'mul'</span>:list(), <span class="string">'div'</span>:list()&#125;</span><br><span class="line">np_list = &#123;<span class="string">'add'</span>:list(), <span class="string">'sub'</span>:list(), <span class="string">'mul'</span>:list(), <span class="string">'div'</span>:list()&#125;</span><br><span class="line">jit_list = &#123;<span class="string">'add'</span>:list(), <span class="string">'sub'</span>:list(), <span class="string">'mul'</span>:list(), <span class="string">'div'</span>:list()&#125;</span><br><span class="line"><span class="meta">@jit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_add</span><span class="params">(x, y)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> np.add(x, y)</span><br><span class="line"><span class="meta">@jit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_sub</span><span class="params">(x, y)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> np.subtract(x, y)</span><br><span class="line"><span class="meta">@jit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_mul</span><span class="params">(x, y)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> np.multiply(x, y)</span><br><span class="line"><span class="meta">@jit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_divide</span><span class="params">(x, y)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> np.divide(x, y)</span><br><span class="line">img = np.array(Image.open(<span class="string">'./img_000058.jpg'</span>))</span><br><span class="line">y = np.full(img.shape, <span class="number">255.</span>, dtype=np.float32)</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="加入速算時間"><a href="#加入速算時間" class="headerlink" title="加入速算時間:"></a>加入速算時間:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line"> <span class="comment"># print('-' * 100)</span></span><br><span class="line"> t = time()</span><br><span class="line"> a = img + <span class="number">255.0</span></span><br><span class="line"> tt = time() - t</span><br><span class="line"> <span class="comment"># print('base add:', tt)</span></span><br><span class="line"> base_list[<span class="string">'add'</span>].append(tt)</span><br><span class="line">t = time()</span><br><span class="line"> b = np.add(img, y)</span><br><span class="line"> tt = time() - t</span><br><span class="line"> <span class="comment"># print('np add:', tt)</span></span><br><span class="line"> np_list[<span class="string">'add'</span>].append(tt)</span><br><span class="line">t = time()</span><br><span class="line"> c = _add(img, y)</span><br><span class="line"> tt = time() - t</span><br><span class="line"> <span class="comment"># print('jit add:', tt)</span></span><br><span class="line"> jit_list[<span class="string">'add'</span>].append(tt)</span><br><span class="line"><span class="comment">#------------------------------</span></span><br><span class="line"> <span class="comment">##sub</span></span><br><span class="line"> <span class="comment"># print('-' * 100)</span></span><br><span class="line"> t = time()</span><br><span class="line"> a = img - <span class="number">255.0</span></span><br><span class="line"> tt = time() - t</span><br><span class="line"> <span class="comment"># print('base sub:', tt)</span></span><br><span class="line"> base_list[<span class="string">'sub'</span>].append(tt)</span><br><span class="line">t = time()</span><br><span class="line"> b = np.subtract(img, y)</span><br><span class="line"> tt = time() - t</span><br><span class="line"> <span class="comment"># print('np sub:', tt)</span></span><br><span class="line"> np_list[<span class="string">'sub'</span>].append(tt)</span><br><span class="line">t = time()</span><br><span class="line"> c = _sub(img, y)</span><br><span class="line"> tt = time() - t</span><br><span class="line"> <span class="comment"># print('jit sub:', tt)</span></span><br><span class="line"> jit_list[<span class="string">'sub'</span>].append(tt)</span><br><span class="line"><span class="comment">#---------------------------</span></span><br><span class="line"> <span class="comment">##mul</span></span><br><span class="line"> <span class="comment"># print('-' * 100)</span></span><br><span class="line"> t = time()</span><br><span class="line"> a = img * <span class="number">255.0</span></span><br><span class="line"> tt = time() - t</span><br><span class="line"> <span class="comment"># print('base mul:', tt)</span></span><br><span class="line"> base_list[<span class="string">'mul'</span>].append(tt)</span><br><span class="line">t = time()</span><br><span class="line"> b = np.multiply(img, y)</span><br><span class="line"> tt = time() - t</span><br><span class="line"> <span class="comment"># print('np mul:', tt)</span></span><br><span class="line"> np_list[<span class="string">'mul'</span>].append(tt)</span><br><span class="line">t = time()</span><br><span class="line"> c = _mul(img, y)</span><br><span class="line"> tt = time() - t</span><br><span class="line"> <span class="comment"># print('jit mul:', tt)</span></span><br><span class="line"> jit_list[<span class="string">'mul'</span>].append(tt)</span><br><span class="line"><span class="comment">#---------------------------</span></span><br><span class="line"> <span class="comment">#### divide</span></span><br><span class="line"><span class="comment"># print('-' * 100)</span></span><br><span class="line"> t = time()</span><br><span class="line"> a = img / <span class="number">255.0</span></span><br><span class="line"> tt = time() - t</span><br><span class="line"> <span class="comment"># print('base div:', tt)</span></span><br><span class="line"> base_list[<span class="string">'div'</span>].append(tt)</span><br><span class="line">t = time()</span><br><span class="line"> b = np.divide(img, y)</span><br><span class="line"> tt = time() - t</span><br><span class="line"> <span class="comment"># print('np div:', tt)</span></span><br><span class="line"> np_list[<span class="string">'div'</span>].append(tt)</span><br><span class="line">t = time()</span><br><span class="line"> c = _divide(img, y)</span><br><span class="line"> tt = time() - t</span><br><span class="line"> <span class="comment"># print('jit div:', tt)</span></span><br><span class="line"> jit_list[<span class="string">'div'</span>].append(tt)</span><br></pre></td></tr></table></figure>
<h1 id="畫出圖形"><a href="#畫出圖形" class="headerlink" title="畫出圖形:"></a>畫出圖形:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.subplot(<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(base_list[<span class="string">'add'</span>], label=<span class="string">'base'</span>)</span><br><span class="line">plt.plot(np_list[<span class="string">'add'</span>], label=<span class="string">'np'</span>)</span><br><span class="line">plt.plot(jit_list[<span class="string">'add'</span>], label=<span class="string">'jit'</span>)</span><br><span class="line">plt.title(<span class="string">'add'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'right'</span>)</span><br><span class="line">plt.subplot(<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(base_list[<span class="string">'sub'</span>], label=<span class="string">'base'</span>)</span><br><span class="line">plt.plot(np_list[<span class="string">'sub'</span>], label=<span class="string">'np'</span>)</span><br><span class="line">plt.plot(jit_list[<span class="string">'sub'</span>], label=<span class="string">'jit'</span>)</span><br><span class="line">plt.title(<span class="string">'sub'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'right'</span>)</span><br><span class="line">plt.subplot(<span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">plt.plot(base_list[<span class="string">'mul'</span>], label=<span class="string">'base'</span>)</span><br><span class="line">plt.plot(np_list[<span class="string">'mul'</span>], label=<span class="string">'np'</span>)</span><br><span class="line">plt.plot(jit_list[<span class="string">'mul'</span>], label=<span class="string">'jit'</span>)</span><br><span class="line">plt.title(<span class="string">'mul'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'right'</span>)</span><br><span class="line">plt.subplot(<span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">plt.plot(base_list[<span class="string">'div'</span>], label=<span class="string">'base'</span>)</span><br><span class="line">plt.plot(np_list[<span class="string">'div'</span>], label=<span class="string">'np'</span>)</span><br><span class="line">plt.plot(jit_list[<span class="string">'div'</span>], label=<span class="string">'jit'</span>)</span><br><span class="line">plt.title(<span class="string">'div'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h1 id="顯示平均"><a href="#顯示平均" class="headerlink" title="顯示平均:"></a>顯示平均:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'base add:'</span>, np.mean(base_list[<span class="string">'add'</span>]))</span><br><span class="line">print(<span class="string">'np   add:'</span>, np.mean(np_list[<span class="string">'add'</span>]))</span><br><span class="line">print(<span class="string">'jit  add:'</span>, np.mean(jit_list[<span class="string">'add'</span>]))</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">'base sub:'</span>, np.mean(base_list[<span class="string">'sub'</span>]))</span><br><span class="line">print(<span class="string">'np   sub:'</span>, np.mean(np_list[<span class="string">'sub'</span>]))</span><br><span class="line">print(<span class="string">'jit  sub:'</span>, np.mean(jit_list[<span class="string">'sub'</span>]))</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">'base mul:'</span>, np.mean(base_list[<span class="string">'mul'</span>]))</span><br><span class="line">print(<span class="string">'np   mul:'</span>, np.mean(np_list[<span class="string">'mul'</span>]))</span><br><span class="line">print(<span class="string">'jit  mul:'</span>, np.mean(jit_list[<span class="string">'mul'</span>]))</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">'base div:'</span>, np.mean(base_list[<span class="string">'div'</span>]))</span><br><span class="line">print(<span class="string">'np   div:'</span>, np.mean(np_list[<span class="string">'div'</span>]))</span><br><span class="line">print(<span class="string">'jit  div:'</span>, np.mean(jit_list[<span class="string">'div'</span>]))</span><br><span class="line">print()</span><br></pre></td></tr></table></figure>
<h1 id="結果"><a href="#結果" class="headerlink" title="結果:"></a>結果:</h1><p><img src="/images/Jit_compare/step1.jpeg" alt="100次結果"></p>
<p>使用 <code>jit</code> 一開始需要初始化的時間，後來就跟 <code>numpy 和 內置函數</code> 差不多時間<br><img src="/images/Jit_compare/100compare.jpeg" alt="100次平均"></p>
<h2 id="100次的平均"><a href="#100次的平均" class="headerlink" title="100次的平均:"></a>100次的平均:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### run 100次</span></span><br><span class="line"><span class="comment">#效率 add np &gt; base &gt; jit</span></span><br><span class="line">base add: <span class="number">0.006876859664916992</span></span><br><span class="line">np   add: <span class="number">0.004611799716949463</span></span><br><span class="line">jit  add: <span class="number">0.015722057819366454</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#效率 sub np &gt; base &gt; jit</span></span><br><span class="line">base sub: <span class="number">0.0070903849601745604</span></span><br><span class="line">np   sub: <span class="number">0.004039065837860107</span></span><br><span class="line">jit  sub: <span class="number">0.011223921775817871</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#效率 mul np &gt; base &gt; jit</span></span><br><span class="line">base mul: <span class="number">0.006820993423461914</span></span><br><span class="line">np   mul: <span class="number">0.004162027835845948</span></span><br><span class="line">jit  mul: <span class="number">0.011623296737670898</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#效率 div np &gt; base &gt; jit</span></span><br><span class="line">base div: <span class="number">0.010809457302093506</span></span><br><span class="line">np   div: <span class="number">0.005157313346862793</span></span><br><span class="line">jit  div: <span class="number">0.012023646831512452</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/Jit_compare/step2.jpeg" alt="1000次結果"></p>
<p>1000次的平均:<br>加減乘的效率都是 <code>np &gt; base &gt; jit</code> 但是除法時候卻變成 <code>np &gt; jit &gt; base</code></p>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論:"></a>結論:</h1><h2 id="100次時"><a href="#100次時" class="headerlink" title="100次時:"></a>100次時:</h2><p>base 運算效率: <code>mul &gt; add &gt; sub &gt; div</code><br>numpy 運算效率: <code>sub &gt; mul &gt; add &gt; div</code><br>jit 運算效率: <code>sub &gt; mul &gt; div &gt; add</code><br><code>add sub mul div</code> 運算個別分析都是: <code>np &gt; base &gt; jit</code><br>— — — — — — — —</p>
<h2 id="1000次時"><a href="#1000次時" class="headerlink" title="1000次時:"></a>1000次時:</h2><p>base 運算效率: <code>add &gt; mul &gt; sub &gt; div</code><br>numpy 運算效率: <code>sub &gt; mul &gt; add &gt; div</code><br>jit 運算效率: <code>sub &gt; mul &gt; add &gt; div</code><br>add sub mut運算個別分析都是: <code>np &gt; base &gt; jit</code><br>但是除法卻是 <code>np &gt; jit &gt; base</code><br>— — — — — — — —<br>另外我又從1100中移除前100個可能會影響jit初始化的時間<br><img src="/images/Jit_compare/step3.jpeg" alt="1100次取後面1000次結果"><br><img src="/images/Jit_compare/1000compare.jpeg" alt="1100次取後面1000次平均"></p>
<p>得出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">base add: <span class="number">0.007069499254226685</span></span><br><span class="line">np   add: <span class="number">0.004326636791229248</span></span><br><span class="line">jit  add: <span class="number">0.00852769184112549</span></span><br><span class="line"></span><br><span class="line">base sub: <span class="number">0.007096832990646363</span></span><br><span class="line">np   sub: <span class="number">0.004187979221343994</span></span><br><span class="line">jit  sub: <span class="number">0.008597030878067017</span></span><br><span class="line"></span><br><span class="line">base mul: <span class="number">0.007033175706863403</span></span><br><span class="line">np   mul: <span class="number">0.004253644466400147</span></span><br><span class="line">jit  mul: <span class="number">0.008852479696273804</span></span><br><span class="line"></span><br><span class="line">base div: <span class="number">0.011279967069625854</span></span><br><span class="line">np   div: <span class="number">0.005475541353225708</span></span><br><span class="line">jit  div: <span class="number">0.009453592300415039</span></span><br></pre></td></tr></table></figure>
<p>base 運算效率: <code>mul &gt; add &gt; sub &gt; div</code><br>numpy 運算效率: <code>sub &gt; mul &gt; add &gt; div</code><br>jit 運算效率: <code>add &gt; sub &gt; mul &gt; div</code><br>個別運算則是和1000次時一樣:<br><code>add sub mut</code> 運算個別分析都是: <code>np &gt; base &gt; jit</code><br>但是除法卻是 <code>np &gt; jit &gt; base</code><br>— — — — — — -<br>*所以大運算除法時候最好不要用內置運算</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Programming</tag>
        <tag>Compare</tag>
      </tags>
  </entry>
  <entry>
    <title>Python — Numpy 切片和索引</title>
    <url>/2020/05/18/Python_Numpy_%E5%88%87%E7%89%87%E5%92%8C%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<p>Numpy 裡最實用的其中之一就是多維切片</p>
<h1 id="創建"><a href="#創建" class="headerlink" title="創建:"></a>創建:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array = np.arange(<span class="number">80</span>)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="一維"><a href="#一維" class="headerlink" title="一維:"></a>一維:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">資料內容為:</span></span><br><span class="line"><span class="string">[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21</span></span><br><span class="line"><span class="string">22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(array[<span class="number">5</span>])            <span class="comment">#顯示索引 5 的數字</span></span><br><span class="line">print(array[<span class="number">5</span> : <span class="number">8</span>])        <span class="comment">#顯示索引 5 ~ 7 的數字</span></span><br><span class="line">print(array[<span class="number">2</span> : ])         <span class="comment">#顯示索引 2 ~ 最後 的數字</span></span><br><span class="line">print(array[ : <span class="number">10</span>])        <span class="comment">#顯示索引 開始 ~ 9 的數字</span></span><br></pre></td></tr></table></figure>
<h1 id="二維"><a href="#二維" class="headerlink" title="二維:"></a>二維:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = array.reshape((<span class="number">8</span>, <span class="number">10</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">資料內容為:</span></span><br><span class="line"><span class="string">[[ 0  1  2  3  4  5  6  7  8  9]</span></span><br><span class="line"><span class="string"> [10 11 12 13 14 15 16 17 18 19]</span></span><br><span class="line"><span class="string"> [20 21 22 23 24 25 26 27 28 29]</span></span><br><span class="line"><span class="string"> [30 31 32 33 34 35 36 37 38 39]</span></span><br><span class="line"><span class="string"> [40 41 42 43 44 45 46 47 48 49]</span></span><br><span class="line"><span class="string"> [50 51 52 53 54 55 56 57 58 59]</span></span><br><span class="line"><span class="string"> [60 61 62 63 64 65 66 67 68 69]</span></span><br><span class="line"><span class="string"> [70 71 72 73 74 75 76 77 78 79]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(array[ : , <span class="number">5</span>])             <span class="comment">#顯示每個 row 索引 5 的數字</span></span><br><span class="line">print(array[ : , <span class="number">5</span> : <span class="number">8</span>])         <span class="comment">#顯示每個 row 索引 5 ~ 7 的數字</span></span><br><span class="line">print(array[ : , <span class="number">4</span> : ])          <span class="comment">#顯示每個 row 索引 4 ~ 最後 的數字</span></span><br><span class="line">print(array[ : , : <span class="number">7</span>])           <span class="comment">#顯示每個 row 索引 開始 ~ 6 的數字</span></span><br></pre></td></tr></table></figure>
<h1 id="三維"><a href="#三維" class="headerlink" title="三維:"></a>三維:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = array.reshape((<span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">資料內容為:</span></span><br><span class="line"><span class="string">[[[ 0  1  2  3  4  5  6  7  8  9]</span></span><br><span class="line"><span class="string">  [10 11 12 13 14 15 16 17 18 19]</span></span><br><span class="line"><span class="string">  [20 21 22 23 24 25 26 27 28 29]</span></span><br><span class="line"><span class="string">  [30 31 32 33 34 35 36 37 38 39]]</span></span><br><span class="line"><span class="string">[[40 41 42 43 44 45 46 47 48 49]</span></span><br><span class="line"><span class="string">  [50 51 52 53 54 55 56 57 58 59]</span></span><br><span class="line"><span class="string">  [60 61 62 63 64 65 66 67 68 69]</span></span><br><span class="line"><span class="string">  [70 71 72 73 74 75 76 77 78 79]]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(array[ : , : , <span class="number">5</span>])           <span class="comment">#顯示每個 row 索引 5 的數字</span></span><br><span class="line">print(array[ : , : , <span class="number">5</span> : <span class="number">8</span>])       <span class="comment">#顯示每個 row 索引 5 ~ 7 的數字</span></span><br><span class="line">print(array[ : , : , <span class="number">4</span> : ])        <span class="comment">#顯示每個 row 索引 4 ~ 最後 的數字</span></span><br><span class="line">print(array[ : , : , : <span class="number">7</span>])         <span class="comment">#顯示每個 row 索引 開始 ~ 6 的數字</span></span><br></pre></td></tr></table></figure>
<h1 id="簡而言之"><a href="#簡而言之" class="headerlink" title="簡而言之:"></a>簡而言之:</h1><p>陣列切片中只要有n個 <code>, (逗號)</code> 顯示的結果就是第 <code>n + 1</code> 維的內容</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Numpy</category>
      </categories>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Raspberry Pi install</title>
    <url>/2020/05/17/Raspberry_Pi_install/</url>
    <content><![CDATA[<p><img src="images/Raspberry_install/title.png" alt="Raspberry title"></p>
<h1 id="Step1"><a href="#Step1" class="headerlink" title="Step1:"></a>Step1:</h1><p>先去Raspberry Pi 官方下載檔案<br>網址:<a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener">https://www.raspberrypi.org/downloads/</a><br>我選擇安裝的是Raspbian版本</p>
<a id="more"></a>

<p><img src="/images/Raspberry_install/step1.png" alt="Image1"></p>
<p>以下三個檔案都可使用 下載zip檔案<br><img src="/images/Raspberry_install/step2.png" alt="Image2"></p>
<h1 id="Step2"><a href="#Step2" class="headerlink" title="Step2:"></a>Step2:</h1><p>下載及安裝 <a href="https://www.balena.io/etcher/" target="_blank" rel="noopener">balenaEtcher</a><br>網址:<a href="https://www.balena.io/etcher/" target="_blank" rel="noopener">https://www.balena.io/etcher/</a><br><img src="/images/Raspberry_install/step3.png" alt="Image3"></p>
<h1 id="Step3"><a href="#Step3" class="headerlink" title="Step3:"></a>Step3:</h1><p>裝上 RaspberryPi 的 SD 卡到電腦</p>
<h1 id="Step4"><a href="#Step4" class="headerlink" title="Step4:"></a>Step4:</h1><p>打開 balenaEtcher 左邊放入剛下載的 Raspbian zip 檔案<br>中間選擇 RaspberryPi SD 卡<br><img src="/images/Raspberry_install/step4.png" alt="Image4"></p>
<p>然後按下 Flash! 即可<br><img src="/images/Raspberry_install/step5.png" alt="Image5"></p>
<p>執行後等他跑完就完成了<br><img src="/images/Raspberry_install/step6.png" alt="Image6"><br><img src="/images/Raspberry_install/step7.png" alt="Image7"><br><img src="/images/Raspberry_install/step8.png" alt="Image8"></p>
<p>結束後把 SD 卡放入Raspberry Pi 即可開機</p>
]]></content>
      <categories>
        <category>Raspberry</category>
      </categories>
      <tags>
        <tag>Install</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow — .pb Save and Restore</title>
    <url>/2020/05/17/Tensorflow-pb_Save_and_Restore/</url>
    <content><![CDATA[<h1 id="Save"><a href="#Save" class="headerlink" title="Save:"></a>Save:</h1><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> graph_util</span><br><span class="line"><span class="keyword">with</span> tf.Session(graph=tf.Graph()) <span class="keyword">as</span> sess:</span><br><span class="line">  <span class="keyword">with</span> tf.variable_scope(<span class="string">'v1'</span>):</span><br><span class="line">   x = tf.placeholder(tf.int32, name=<span class="string">'x'</span>)</span><br><span class="line">   zz = tf.placeholder(tf.int32, name=<span class="string">'zz'</span>)</span><br><span class="line">   b = tf.Variable(<span class="number">2</span>, name=<span class="string">'b'</span>)</span><br><span class="line">   xb = tf.multiply(x, b)</span><br><span class="line">   result = tf.add(xb, zz, name=<span class="string">'add'</span>)</span><br><span class="line">   print(result.name)</span><br><span class="line">  sess.run(tf.global_variables_initializer())</span><br><span class="line">  constant_graph = graph_util.convert_variables_to_constants(</span><br><span class="line">                  sess, </span><br><span class="line">                  tf.get_default_graph().as_graph_def(), </span><br><span class="line">                  [<span class="string">'v1/zz'</span>, <span class="string">'v1/x'</span>, <span class="string">'v1/b'</span>, <span class="string">'v1/add'</span>])</span><br><span class="line">  <span class="keyword">with</span> tf.gfile.FastGFile(<span class="string">'./filename.pb'</span>, mode=<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(constant_graph.SerializeToString())</span><br></pre></td></tr></table></figure>
<h1 id="Restore"><a href="#Restore" class="headerlink" title="Restore:"></a>Restore:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> graph_util</span><br><span class="line"><span class="keyword">with</span> tf.Session(graph=tf.Graph()) <span class="keyword">as</span> sess:</span><br><span class="line">  sess.run(tf.global_variables_initializer())</span><br><span class="line">  graph_def = tf.GraphDef()</span><br><span class="line">  <span class="keyword">with</span> open(<span class="string">'./filename.pb'</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    graph_def.ParseFromString(f.read())</span><br><span class="line">    tf.import_graph_def(graph_def, name=<span class="string">""</span>)</span><br><span class="line">  x = sess.graph.get_tensor_by_name(<span class="string">'v1/x:0'</span>)</span><br><span class="line">  zz = sess.graph.get_tensor_by_name(<span class="string">'v1/zz:0'</span>)</span><br><span class="line">  b = sess.graph.get_tensor_by_name(<span class="string">'v1/b:0'</span>)</span><br><span class="line">  add = sess.graph.get_tensor_by_name(<span class="string">'v1/add:0'</span>)</span><br><span class="line">  print(sess.run(add, feed_dict=&#123;x:<span class="number">2</span>, zz:<span class="number">5</span>, b:<span class="number">3</span>&#125;))</span><br><span class="line">  <span class="comment">#x * b + zz = 11</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>Tensorflow</category>
      </categories>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Python tkinter GUI 基本用法</title>
    <url>/2020/05/17/Python_tkinter_GUI_%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h3 id="tkinter-所有元件"><a href="#tkinter-所有元件" class="headerlink" title="tkinter 所有元件:"></a>tkinter 所有元件:</h3><p><img src="/images/Tkinter_GUI/All_GUI.jpg" alt="21 種 GUI 元件"></p>
<a id="more"></a>

<h3 id="基本視窗"><a href="#基本視窗" class="headerlink" title="基本視窗:"></a>基本視窗:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line"><span class="comment">#視窗標題</span></span><br><span class="line">root.title(<span class="string">'hello'</span>)</span><br><span class="line"><span class="comment">#寬度 200</span></span><br><span class="line"><span class="comment">#高度 250</span></span><br><span class="line"><span class="comment">#螢幕位置 X 300</span></span><br><span class="line"><span class="comment">#螢幕位置 Y 400</span></span><br><span class="line">root.geometry(<span class="string">'200x250+300+400'</span>)</span><br><span class="line"><span class="comment">#運行視窗</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/window.jpg" alt="基本視窗"></p>
<h1 id="1-BitmapImage"><a href="#1-BitmapImage" class="headerlink" title="1.BitmapImage:"></a>1.BitmapImage:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#開啟檔案 images.xbm</span></span><br><span class="line"><span class="comment">#也可使用 bitmap = tk.BitmapImage(data=bitmapData)</span></span><br><span class="line">bitmap = tk.BitmapImage(file=<span class="string">'images.xbm'</span>)</span><br><span class="line">tk.Label(root, image=bitmap).pack()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/BitmapImage.jpg" alt="BitmapImage展示"></p>
<h1 id="2-Button"><a href="#2-Button" class="headerlink" title="2.Button:"></a>2.Button:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line"> print(<span class="string">'hello'</span>)</span><br><span class="line"><span class="comment">#按下時會顯示 hello</span></span><br><span class="line">tk.Button(root, text=<span class="string">'Button1'</span>, command=hello).pack()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Button.jpeg" alt="Button展示"></p>
<h1 id="3-Canvas"><a href="#3-Canvas" class="headerlink" title="3.Canvas:"></a>3.Canvas:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#背景設為紅色</span></span><br><span class="line">canvas = tk.Canvas(root, bg=<span class="string">'red'</span>)</span><br><span class="line">canvas.pack()</span><br><span class="line"><span class="comment">#從 (0, 0) 位置畫線到 (200, 250) 位置</span></span><br><span class="line">canvas.create_line(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">250</span>)</span><br><span class="line"><span class="comment">#從 (200, 0) 位置畫線到 (0, 250) 位置</span></span><br><span class="line">canvas.create_line(<span class="number">200</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">250</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Canvas.jpg" alt="Canvas展示"></p>
<h1 id="4-Checkbutton"><a href="#4-Checkbutton" class="headerlink" title="4.Checkbutton:"></a>4.Checkbutton:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="comment">#提取目前 var 內容</span></span><br><span class="line"> print(var.get())</span><br><span class="line"><span class="comment">#設定變數 Int 型別儲存目前內容</span></span><br><span class="line">var = tk.IntVar()</span><br><span class="line"><span class="comment">#儲存的資料位置為 var</span></span><br><span class="line"><span class="comment">#勾選時值設為1 未勾選則設為0 每次按下皆顯示目前狀態</span></span><br><span class="line">tk.Checkbutton(root, variable=var, text=<span class="string">'Check'</span>, onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>, command=check).pack()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Checkbutton.jpg" alt="Checkbutton展示"></p>
<h1 id="5-Entry"><a href="#5-Entry" class="headerlink" title="5.Entry:"></a>5.Entry:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="comment">#提取目前內容</span></span><br><span class="line"> print(entry.get())</span><br><span class="line">entry = tk.Entry(root)</span><br><span class="line">entry.pack()</span><br><span class="line"><span class="comment">#按下時會顯示目前 Entry 內容</span></span><br><span class="line">tk.Button(root, text=<span class="string">'Button'</span>, command=check).pack()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Entry.jpg" alt="Entry展示"></p>
<h1 id="6-Frame"><a href="#6-Frame" class="headerlink" title="6.Frame:"></a>6.Frame:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#背景設為紅色</span></span><br><span class="line"><span class="comment">#創建可容納物件的框架</span></span><br><span class="line">frame = tk.Frame(root, bg=<span class="string">'red'</span>, width=<span class="number">100</span>, height=<span class="number">100</span>)</span><br><span class="line">frame.pack()</span><br><span class="line"><span class="comment">#把 Label 放入 Frame</span></span><br><span class="line">tk.Label(frame, text=<span class="string">'Label'</span>).place(x=<span class="number">30</span>, y=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Frame.jpg" alt="Frame展示"></p>
<h1 id="7-Label"><a href="#7-Label" class="headerlink" title="7.Label:"></a>7.Label:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tk.Label(root, text=<span class="string">'Label'</span>).pack()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Label.jpg" alt="Label展示"></p>
<h1 id="8-LabelFrame"><a href="#8-LabelFrame" class="headerlink" title="8.LabelFrame:"></a>8.LabelFrame:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#創建帶有標籤且可容納物件的框架</span></span><br><span class="line">labelframe = tk.LabelFrame(root, text=<span class="string">'Label Frame'</span>)</span><br><span class="line">labelframe.pack()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="comment">#提取目前 var 內容</span></span><br><span class="line"> print(var.get())</span><br><span class="line"><span class="comment">#設定變數 Int 型別儲存目前內容</span></span><br><span class="line">var = tk.IntVar()</span><br><span class="line">tk.Checkbutton(labelframe, variable=var, text=<span class="string">'Check'</span>, onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>, command=check).pack()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/LabelFrame.jpg" alt="LabelFrame展示"></p>
<h1 id="9-Listbox"><a href="#9-Listbox" class="headerlink" title="9.Listbox:"></a>9.Listbox:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#設定變數 String 型別儲存目前內容</span></span><br><span class="line">var = tk.StringVar()</span><br><span class="line"><span class="comment">#設置 var 內容</span></span><br><span class="line">var.set([<span class="string">'box1'</span>, <span class="string">'box2'</span>])</span><br><span class="line">entry = tk.Entry(root)</span><br><span class="line">entry.pack()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="comment">#將 Entry 的內容取出插入至 Listbox 的最後</span></span><br><span class="line"> listbox.insert(<span class="string">'end'</span>, entry.get())</span><br><span class="line">tk.Button(root, text=<span class="string">'Insert'</span>, command=insert).pack()</span><br><span class="line"><span class="comment">#儲存的資料位置為 var</span></span><br><span class="line">listbox = tk.Listbox(root, listvariable=var)</span><br><span class="line">listbox.pack()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Listbox.jpg" alt="Listbox展示"></p>
<h1 id="10-Menu"><a href="#10-Menu" class="headerlink" title="10.Menu:"></a>10.Menu:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line"> print(<span class="string">'hello'</span>)</span><br><span class="line"><span class="comment">#創建菜單框架</span></span><br><span class="line">menu = tk.Menu(root)</span><br><span class="line"><span class="comment">#tearoff=False 關閉菜單裡的虛線欄</span></span><br><span class="line">filemenu = tk.Menu(menu, tearoff=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#將 filemenu 放入 menu 菜單</span></span><br><span class="line">menu.add_cascade(menu=filemenu, label=<span class="string">'File'</span>)</span><br><span class="line"><span class="comment">#增加菜單選項</span></span><br><span class="line">filemenu.add_command(label=<span class="string">'Hello'</span>, command=hello)</span><br><span class="line"><span class="comment">#增加分隔線</span></span><br><span class="line">filemenu.add_separator()</span><br><span class="line"><span class="comment">#增加菜單選項</span></span><br><span class="line">filemenu.add_command(label=<span class="string">'Exit'</span>, command=root.quit)</span><br><span class="line"><span class="comment">#將 menu 菜單放入 root</span></span><br><span class="line">root.config(menu=menu)</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Menu.jpg" alt="Menu展示"></p>
<h1 id="11-Menubutton"><a href="#11-Menubutton" class="headerlink" title="11.Menubutton:"></a>11.Menubutton:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line"> print(<span class="string">'hello'</span>)</span><br><span class="line"><span class="comment"># relief='raised' 使外框凸起看起像Button</span></span><br><span class="line"><span class="comment">#創建一個 Menubutton 若裡面沒放物件則無法按下</span></span><br><span class="line">menubutton = tk.Menubutton(root, text=<span class="string">'Menubutton'</span>, relief=<span class="string">'raised'</span>)</span><br><span class="line">menubutton.pack()</span><br><span class="line"><span class="comment">#創建一個 Menu 放入 Menubutton 裡面</span></span><br><span class="line">menubutton.menu = tk.Menu(menubutton, tearoff=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#固定進 menubutton</span></span><br><span class="line">menubutton[<span class="string">'menu'</span>] = menubutton.menu</span><br><span class="line"><span class="comment">#放入一個物件進 menubutton</span></span><br><span class="line">menubutton.menu.add_command(label=<span class="string">'Hello'</span>, command=hello)</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Menubutton.jpg" alt="Menubutton展示"></p>
<h1 id="12-Message"><a href="#12-Message" class="headerlink" title="12.Message:"></a>12.Message:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#設定變數 String 型別儲存目前內容</span></span><br><span class="line">var = tk.StringVar()</span><br><span class="line"><span class="comment">#設置 var 內容</span></span><br><span class="line">var.set(<span class="string">'Hello'</span>)</span><br><span class="line"><span class="comment">#儲存的資料位置為 var</span></span><br><span class="line"><span class="comment"># relief='raised' 使外框凸起看起像Button</span></span><br><span class="line">tk.Message(root, textvariable=var, relief=<span class="string">'raised'</span>).pack()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Message.jpg" alt="Message展示"></p>
<h1 id="13-OptionMenu"><a href="#13-OptionMenu" class="headerlink" title="13.OptionMenu:"></a>13.OptionMenu:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="comment">#提取目前 var 內容</span></span><br><span class="line"> print(var.get())</span><br><span class="line"><span class="comment">#設定變數 String 型別儲存目前內容</span></span><br><span class="line">var = tk.StringVar()</span><br><span class="line"><span class="comment">#設置 var 內容</span></span><br><span class="line">var.set(<span class="string">'Hello'</span>)</span><br><span class="line"><span class="comment">#儲存的資料位置為 var</span></span><br><span class="line"><span class="comment"># 'Hello', 'Option1', 'Option2', 'Option3' 為選項的內容</span></span><br><span class="line">tk.OptionMenu(root, var, <span class="string">'Hello'</span>, <span class="string">'Option1'</span>, <span class="string">'Option2'</span>, <span class="string">'Option3'</span>).pack()</span><br><span class="line"><span class="comment">#按下時會顯示目前選擇的內容</span></span><br><span class="line">tk.Button(root, text=<span class="string">'Check'</span>, command=check).pack()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/OptionMenu.jpg" alt="OptionMenu展示"></p>
<h1 id="14-PanedWindow"><a href="#14-PanedWindow" class="headerlink" title="14.PanedWindow:"></a>14.PanedWindow:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#背景設為紅色</span></span><br><span class="line">panedwindow = tk.PanedWindow(bg=<span class="string">'red'</span>)</span><br><span class="line"><span class="comment"># fill='both' 向 x 軸和 y 軸填滿</span></span><br><span class="line"><span class="comment"># expand=1 開啟 fill</span></span><br><span class="line">panedwindow.pack(fill=<span class="string">'both'</span>, expand=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#新增物件進 panedwindow</span></span><br><span class="line">panedwindow.add(tk.Label(panedwindow, text=<span class="string">'Label1'</span>, bg=<span class="string">'orange'</span>))</span><br><span class="line"><span class="comment">#新增物件進 panedwindow</span></span><br><span class="line">panedwindow.add(tk.Label(panedwindow, text=<span class="string">'Label2'</span>, bg=<span class="string">'yellow'</span>))</span><br><span class="line"><span class="comment">#創建新的 PanedWindow 物件 orient='vertical' 放置方式為垂直</span></span><br><span class="line">newpaned = tk.PanedWindow(bg=<span class="string">'black'</span>, orient=<span class="string">'vertical'</span>)</span><br><span class="line"><span class="comment">#新增物件進 panedwindow</span></span><br><span class="line">panedwindow.add(newpaned)</span><br><span class="line"><span class="comment">#新增物件進 newpaned</span></span><br><span class="line">newpaned.add(tk.Label(newpaned, text=<span class="string">'Label3'</span>, bg=<span class="string">'greenyellow'</span>))</span><br><span class="line"><span class="comment">#新增物件進 newpaned</span></span><br><span class="line">newpaned.add(tk.Label(newpaned, text=<span class="string">'Label4'</span>, bg=<span class="string">'lightblue'</span>))</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/PanedWindow.jpg" alt="PanedWindow展示"></p>
<h1 id="15-PhotoImage"><a href="#15-PhotoImage" class="headerlink" title="15.PhotoImage:"></a>15.PhotoImage:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#開啟檔案 images.png</span></span><br><span class="line"><span class="comment">#檔案 jpg png gif 中支援 png gif 不支援 jpg</span></span><br><span class="line">image = tk.PhotoImage(file=<span class="string">'images.png'</span>)</span><br><span class="line">tk.Label(root, image=image).pack()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/PhotoImage.jpg" alt="PhotoImage展示"></p>
<h1 id="16-Radiobutton"><a href="#16-Radiobutton" class="headerlink" title="16.Radiobutton:"></a>16.Radiobutton:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="comment">#提取目前 var 內容</span></span><br><span class="line"> print(var.get())</span><br><span class="line"><span class="comment">#設定變數 String 型別儲存目前內容</span></span><br><span class="line">var = tk.StringVar()</span><br><span class="line"><span class="comment">#設置 var 內容</span></span><br><span class="line">var.set(<span class="string">'A'</span>)</span><br><span class="line"><span class="comment">#新增選項</span></span><br><span class="line">tk.Radiobutton(root, variable=var, text=<span class="string">'Option A'</span>, value=<span class="string">'A'</span>).pack()</span><br><span class="line"><span class="comment">#新增選項</span></span><br><span class="line">tk.Radiobutton(root, variable=var, text=<span class="string">'Option B'</span>, value=<span class="string">'B'</span>).pack()</span><br><span class="line"><span class="comment">#新增選項</span></span><br><span class="line">tk.Radiobutton(root, variable=var, text=<span class="string">'Option C'</span>, value=<span class="string">'C'</span>).pack()</span><br><span class="line"><span class="comment">#按下時會顯示目前選擇的內容</span></span><br><span class="line">tk.Button(root, text=<span class="string">'Check'</span>, command=check).pack()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Radiobutton.jpg" alt="Radiobutton展示"></p>
<h1 id="17-Scale"><a href="#17-Scale" class="headerlink" title="17.Scale:"></a>17.Scale:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from_=0 從 0 開始</span></span><br><span class="line"><span class="comment"># to=100 到 100</span></span><br><span class="line"><span class="comment"># orient='horizontal' 水平對齊</span></span><br><span class="line"><span class="comment"># tickinterval=20 每 20 單位顯示標記</span></span><br><span class="line"><span class="comment"># resolution=0.1 移動最小單位為 0.1</span></span><br><span class="line"><span class="comment"># fill='x' 向 x 軸填滿</span></span><br><span class="line"><span class="comment"># showvalue=True 顯示目前的數字</span></span><br><span class="line">tk.Scale(root, label=<span class="string">'Scale'</span>, from_=<span class="number">0</span>, to=<span class="number">100</span>, orient=<span class="string">'horizontal'</span>, tickinterval=<span class="number">20</span>, resolution=<span class="number">0.1</span>, showvalue=<span class="literal">True</span>).pack(fill=<span class="string">'x'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Scale.jpg" alt="Scale展示"></p>
<h1 id="18-Scrollbar"><a href="#18-Scrollbar" class="headerlink" title="18.Scrollbar:"></a>18.Scrollbar:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可配合 listboxs/canvases/text 元件使用</span></span><br><span class="line"><span class="comment">#創建 scrollbar</span></span><br><span class="line">scrollbar = tk.Scrollbar(root)</span><br><span class="line"><span class="comment"># side='right' 放入右邊</span></span><br><span class="line"><span class="comment"># fill='y' 向 y 軸填滿</span></span><br><span class="line">scrollbar.pack(side=<span class="string">'right'</span>, fill=<span class="string">'y'</span>)</span><br><span class="line"><span class="comment">#創建 listbox</span></span><br><span class="line">listbox = tk.Listbox(root, yscrollcommand=scrollbar.set)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line"> <span class="comment">#插入內容到 listbox 尾端</span></span><br><span class="line"> listbox.insert(<span class="string">'end'</span>, i)</span><br><span class="line"><span class="comment"># side='left' 放入左邊</span></span><br><span class="line"><span class="comment"># fill='both' 向 x 軸和 y 軸填滿</span></span><br><span class="line"><span class="comment"># expand=1 開啟 fill</span></span><br><span class="line">listbox.pack(side=<span class="string">'left'</span>, fill=<span class="string">'both'</span>, expand=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># scrollbar 移動時使 listbox 跟著移動</span></span><br><span class="line">scrollbar.config(command=listbox.yview)</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Scrollbar.jpg" alt="Scrollbar展示"></p>
<h1 id="19-Spinbox"><a href="#19-Spinbox" class="headerlink" title="19.Spinbox:"></a>19.Spinbox:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from_=0 從 0 開始</span></span><br><span class="line"><span class="comment"># to=100 到 100</span></span><br><span class="line">tk.Spinbox(root, from_=<span class="number">0</span>, to=<span class="number">100</span>).pack()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Spinbox.jpg" alt="Spinbox展示"></p>
<h1 id="20-Text"><a href="#20-Text" class="headerlink" title="20.Text:"></a>20.Text:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="comment">#插入內容到 text 尾端</span></span><br><span class="line"> text.insert(<span class="string">'end'</span>, <span class="string">'hello'</span>)</span><br><span class="line"><span class="comment"># width=20 寬度設為 20</span></span><br><span class="line"><span class="comment"># height=10 高度設為 10</span></span><br><span class="line">text = tk.Text(root, width=<span class="number">20</span>, height=<span class="number">10</span>)</span><br><span class="line">text.pack()</span><br><span class="line"><span class="comment">#按下時會插入 hello 至 text</span></span><br><span class="line">tk.Button(root, text=<span class="string">'Insert'</span>, command=insert).pack()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Text.jpg" alt="Text展示"></p>
<h1 id="21-Toplevel"><a href="#21-Toplevel" class="headerlink" title="21.Toplevel:"></a>21.Toplevel:</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tk.Label(root, text=<span class="string">'Root label'</span>).pack()</span><br><span class="line"><span class="comment">#創建 Toplevel</span></span><br><span class="line">toplevel = tk.Toplevel()</span><br><span class="line"><span class="comment">#寬度 200</span></span><br><span class="line"><span class="comment">#高度 250</span></span><br><span class="line"><span class="comment">#螢幕位置 X 500</span></span><br><span class="line"><span class="comment">#螢幕位置 Y 400</span></span><br><span class="line">toplevel.geometry(<span class="string">'200x250+500+400'</span>)</span><br><span class="line"><span class="comment">#視窗標題</span></span><br><span class="line">toplevel.title(<span class="string">'Toplevel'</span>)</span><br><span class="line">tk.Label(toplevel, text=<span class="string">'Toplevel label'</span>).pack()</span><br></pre></td></tr></table></figure>
<p><img src="/images/Tkinter_GUI/Toplevel.jpg" alt="Toplevel展示"></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Tkinter</category>
      </categories>
      <tags>
        <tag>Programming</tag>
      </tags>
  </entry>
</search>
